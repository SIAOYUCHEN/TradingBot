basePath: /
definitions:
  TradingBot_domain_user_getAllUsers.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  TradingBot_domain_user_getUser.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  domain.CreateResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  domain.CreateTradeCommand:
    properties:
      amount:
        type: number
      direction:
        $ref: '#/definitions/domain.TradeDirection'
      market:
        $ref: '#/definitions/domain.TradeMarket'
      price:
        type: number
    required:
    - amount
    - direction
    - market
    - price
    type: object
  domain.CreateTradeResponse:
    properties:
      message:
        type: string
    type: object
  domain.CreateUserCommand:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  domain.DeleteTradeResponse:
    properties:
      message:
        type: string
    type: object
  domain.DeleteUserResponse:
    properties:
      message:
        type: string
    type: object
  domain.Email:
    properties:
      email:
        example: user@example.com
        type: string
    type: object
  domain.GetTradeResponse:
    properties:
      trades:
        items:
          $ref: '#/definitions/domain.Trade'
        type: array
    type: object
  domain.GetUserAllResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/TradingBot_domain_user_getAllUsers.UserResponse'
        type: array
    type: object
  domain.LoginCommand:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  domain.LoginResponse:
    properties:
      token:
        type: string
    type: object
  domain.Trade:
    properties:
      amount:
        description: 交易數量
        type: number
      direction:
        allOf:
        - $ref: '#/definitions/domain.TradeDirection'
        description: 交易方向，ask 表示賣出，bid 表示買入
      market:
        allOf:
        - $ref: '#/definitions/domain.TradeMarket'
        description: 市場代碼
      price:
        description: 交易價格
        type: number
    type: object
  domain.TradeDirection:
    enum:
    - Ask
    - Bid
    type: string
    x-enum-comments:
      Ask: 賣出
      Bid: 買入
    x-enum-varnames:
    - Ask
    - Bid
  domain.TradeMarket:
    enum:
    - Eth
    - Btc
    - Flow
    - Sol
    type: string
    x-enum-varnames:
    - Eth
    - Btc
    - Flow
    - Sol
host: localhost:8080
info:
  contact: {}
  description: This is a sample server for TradingBot.
  title: TradingBot API
  version: "1"
paths:
  /api/v1/all/trades:
    get:
      consumes:
      - application/json
      description: Retrieves a map of all trades grouped by their market and direction
        from the database
      produces:
      - application/json
      responses:
        "200":
          description: Map of all trades grouped by market and direction
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/domain.Trade'
              type: array
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Retrieve all trades
      tags:
      - Trade
  /api/v1/create/trade:
    post:
      consumes:
      - application/json
      description: Creates a new trade with market, price, amount, and direction
      parameters:
      - description: Create Trade Command
        in: body
        name: createTradeCommand
        required: true
        schema:
          $ref: '#/definitions/domain.CreateTradeCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Trade created successfully
          schema:
            $ref: '#/definitions/domain.CreateTradeResponse'
        "400":
          description: Bad request - invalid input
          schema:
            type: string
        "401":
          description: Unauthorized - invalid credentials
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create Trade
      tags:
      - Trade
  /api/v1/create/user:
    post:
      consumes:
      - application/json
      description: Create a new user with username, password, and email
      parameters:
      - description: Create User Command
        in: body
        name: createUserCommand
        required: true
        schema:
          $ref: '#/definitions/domain.CreateUserCommand'
      produces:
      - application/json
      responses:
        "200":
          description: User created successfully
          schema:
            $ref: '#/definitions/domain.CreateResponse'
        "400":
          description: Bad request - invalid input
          schema:
            type: string
        "401":
          description: Unauthorized - invalid credentials
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create new user
      tags:
      - user
  /api/v1/delete/trade/{market}/{direction}:
    delete:
      consumes:
      - application/json
      description: Deletes a trade with the specified market and direction from the
        database
      parameters:
      - description: Market Identifier
        in: path
        name: market
        required: true
        type: string
      - description: Trade Direction
        in: path
        name: direction
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Trade deleted successfully
          schema:
            $ref: '#/definitions/domain.DeleteTradeResponse'
        "400":
          description: Bad request - invalid input
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete trade
      tags:
      - Trade
  /api/v1/delete/user/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a user with the specified ID from the database
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/domain.DeleteUserResponse'
        "400":
          description: Invalid user ID
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal Server Error - Error deleting user
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete a user
      tags:
      - users
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Handles user login and returns a JWT token
      parameters:
      - description: Login Credentials
        in: body
        name: loginBody
        required: true
        schema:
          $ref: '#/definitions/domain.LoginCommand'
      produces:
      - application/json
      responses:
        "200":
          description: JWT Token returned on successful authentication
          schema:
            $ref: '#/definitions/domain.LoginResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: User Login
      tags:
      - Authentication
  /api/v1/trade/{market}/{direction}:
    get:
      consumes:
      - application/json
      description: Retrieve trades based on market and direction
      parameters:
      - description: Market Identifier
        enum:
        - Eth
        - Btc
        - Flow
        - Sol
        in: path
        name: market
        required: true
        type: string
      - description: Trade Direction
        enum:
        - Ask
        - Bid
        in: path
        name: direction
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of trades fetched successfully
          schema:
            items:
              $ref: '#/definitions/domain.GetTradeResponse'
            type: array
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get trade details
      tags:
      - Trade
  /api/v1/user/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a single user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of user information
          schema:
            $ref: '#/definitions/TradingBot_domain_user_getUser.UserResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get User by ID
      tags:
      - users
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.GetUserAllResponse'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all users
      tags:
      - Users
  /api/v1/users/{id}/email:
    put:
      consumes:
      - application/json
      description: Update user email by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Email Object
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/domain.Email'
      produces:
      - application/json
      responses:
        "200":
          description: Email updated successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update user email
      tags:
      - Users
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
